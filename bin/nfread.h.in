/*
 *  Copyright (c) 2012, Daniel Roethlisberger
 *  Copyright (c) 2009, Peter Haag
 *  Copyright (c) 2004-2008, SWITCH - Teleinformatikdienste fuer Lehre und Forschung
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *  
 *   * Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice, 
 *     this list of conditions and the following disclaimer in the documentation 
 *     and/or other materials provided with the distribution.
 *   * Neither the name of SWITCH nor the names of its contributors may be 
 *     used to endorse or promote products derived from this software without 
 *     specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 *  POSSIBILITY OF SUCH DAMAGE.
 *  
 *  $Author$
 *
 *  $Id$
 *
 *  $LastChangedRevision$
 */

#ifndef NFREAD_H
#define NFREAD_H

#ifndef NFREAD_C

/* required knobs from config.h; including config.h would pollute the
 * library user's namespace and make it impossible to use the library
 * in an autotools project. */
#if @HAVE_STDINT_H@
#define NFREAD_HAVE_STDINT_H            1
#endif /* AC_SUBST(HAVE_STDINT_H) */
#if @HAVE_STDDEF_H@
#define NFREAD_HAVE_STDDEF_H            1
#endif /* AC_SUBST(HAVE_STDDEF_H) */
#if @WORDS_BIGENDIAN@
#define NFREAD_WORDS_BIGENDIAN          1
#endif /* AC_SUBST(WORDS_BIGENDIAN) */

/* standard integer types */
#ifdef NFREAD_HAVE_STDINT_H
#include <stdint.h>
#else /* !NFREAD_HAVE_STDINT_H */
typedef unsigned long long      uint64_t;
typedef unsigned long           uint32_t;
typedef unsigned short          uint16_t;
typedef unsigned char           uint8_t;
#endif /* !NFREAD_HAVE_STDINT_H */

/* master_record_t and nffile_t are defined in nffile.h;
 * we need the preprocessor hacks in order to prevent namespace clashes
 * if this header is used in an autotools-enabled project; in the long
 * run, nffile.h should be cleaned up since it pollutes the namespace
 * with problematic symbols */
#if !defined(HAVE_STDDEF_H) && defined(NFREAD_HAVE_STDDEF_H)
#define HAVE_STDDEF_H                   1
#define NFREAD_DEFINED_HAVE_STDDEF_H    1
#endif /* !defined(HAVE_STDDEF_H) && defined(NFREAD_HAVE_STDDEF_H) */
#if !defined(WORDS_BIGENDIAN) && defined(NFREAD_WORDS_BIGENDIAN)
#define WORDS_BIGENDIAN                 1
#define NFREAD_DEFINED_WORDS_BIGENDIAN  1
#endif /* !defined(WORDS_BIGENDIAN) && defined(NFREAD_WORDS_BIGENDIAN) */
#include <nfread/nffile.h>
#ifdef NFREAD_DEFINED_HAVE_STDDEF_H
#undef HAVE_STDDEF_H
#undef NFREAD_DEFINED_HAVE_STDDEF_H
#endif /* NFREAD_DEFINED_HAVE_STDDEF_H */
#ifdef NFREAD_DEFINED_WORDS_BIGENDIAN
#undef WORDS_BIGENDIAN
#undef NFREAD_DEFINED_WORDS_BIGENDIAN
#endif /* NFREAD_DEFINED_WORDS_BIGENDIAN */

/* useful parts from util.h */
#ifdef NFREAD_WORDS_BIGENDIAN
#       define ntohll(n)        (n)
#       define htonll(n)        (n)
#else /* !NFREAD_WORDS_BIGENDIAN */
#       define ntohll(n)        (((uint64_t)ntohl(n)) << 32) + ntohl((n) >> 32)
#       define htonll(n)        (((uint64_t)htonl(n)) << 32) + htonl((n) >> 32)
#endif /* !NFREAD_WORDS_BIGENDIAN */

#endif /* !NFREAD_C */


#if !defined(__GNUC__) && !defined(__attribute__)
#define __attribute__(x) 
#endif /* !defined(__GNUC__) && !defined(__attribute__) */


/*
 * Version of libnfread.
 * 0xAABBCCDD where AA.BB.CC is nfdump version, DD is libnfread revision.
 * Use NFREAD_VERSION to determine the version at build-time and
 * nfread_version() at run-time.
 */
#define NFREAD_VERSION          0x01060503UL
unsigned long nfread_version(void) __attribute__((const));


/*
 * Error codes passed to nfread_iterate_cb_t's err argument.
 */
#define NFREAD_SUCCESS          0       /* success; nfrec contains record */
#define NFREAD_ERROR            1       /* unspecified error while reading */
#define NFREAD_ECORRUPT         2       /* corrupt data file */
#define NFREAD_EBLKTYPE         3       /* unknown block type */
#define NFREAD_ERECTYPE         4       /* unknown record type */

/*
 * Possible return values from nfread_iterate_cb_t's.
 */
#define NFREAD_LOOP_NEXT        0       /* continue with next record */
#define NFREAD_LOOP_EXIT        1       /* exit the loop and finish */

/*
 * Iterator callback type.
 * On success, err is set to NFREAD_SUCCESS and nfrec is a pointer to a
 * read netflow record, and where is NULL.
 * On errors, err is != NFREAD_SUCCESS and where is a pointer to a string
 * indicating which netflow data file was causing the error, and nfrec is NULL.
 * The callback should return either NFREAD_LOOP_NEXT or NFREAD_LOOP_EXIT to
 * signal libnfread whether to continue reading netflow records.
 */
typedef int (*nfread_iterate_cb_t)(const master_record_t *nfrec,
                                   int err, const char *where);


/*
 * Initialize the global file set using rfile, Rfile and Mdirs configuration.
 * The nfread instance is always global; libnfread cannot be opened multiple
 * times and is not thread-safe.
 *
 * rfile, Rfile and Mdirs are the same as -r -R and -M of the nfdump utility.
 *
 * Returns 0 on success, -1 on failure.
 */
int nfread_init(const char *rfile, const char *Rfile, const char *Mdirs);

/*
 * Deinitialize libnfread after initialization using nfread_init().
 */
void nfread_fini(void);

/*
 * Iterate over all netflow records in the global file set, unpack them,
 * and pass them to nfread_iterate_cb_t.  The _filtered variant additionally
 * filters the flows using an nfdump filter expression.
 */
#define nfread_iterate(cb) \
        nfread_iterate_filtered((cb), NULL)
int nfread_iterate_filtered(nfread_iterate_cb_t itercb, const char *fltexpr)
                            __attribute__((nonnull(1)));


/*
 * Open a specific file containing netflow data by name independent of the
 * global file set.
 */
nffile_t * nfread_file_open(const char *filename) __attribute__((malloc));

/*
 * Close a specific file opened previously by nfread_file_open().
 */
void nfread_file_close(nffile_t *nffile) __attribute__((nonnull));

/*
 * Iterate over all netflow records in a file, unpack them, and pass them to
 * nfread_iterate_cb_t.  The _filtered variant additionally filters the
 * flows using an nfdump filter expression.
 */
#define nfread_file_iterate(nffile, cb) \
        nfread_file_iterate_filtered((nffile), (cb), NULL)
int nfread_file_iterate_filtered(nffile_t *nffile, nfread_iterate_cb_t itercb,
                                 const char *fltexpr)
                                 __attribute__((nonnull(1,2)));

#endif /* NFREAD_H */

